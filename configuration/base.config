/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Basic configuration for some process
 * -------------------------------------------------
 */

includeConfig 'genomes.config'
wf_repository = 'maxulysse'
wf_tag = 'latest'

params {
  annotateTools = ''
  annotateVCF = ''
  containerPath = '.'
  containers = '.'
  docker = false
  explicitBqsrNeeded = true
  genome = 'GRCh38'
  genome_base = ''
  help = false
  more = false
  nfRequiredVersion = '0.25.0'
  noBAMQC = false
  noGVCF = false
  noReports = false
  nucleotidesPerSecond = 1000.0
  onlyQC = false
  outDir = '.'
  project = ''
  push = false
  refDir = ''
  repository = wf_repository
  sample = ''
  sampleDir = ''
  singularity = false
  step = 'mapping'
  tag = wf_tag
  test = ''
  tools = ''
  verbose = false
  version = '2.0.0'
}

process {
  $ConcatVCF {
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

report {  // Turning on execution report by default
  enabled = true
  file = "${params.outDir}/Reports/Sarek_report.html"
}

timeline { // Turning on timeline tracking by default
  enabled = true
  file = "${params.outDir}/Reports/Sarek_timeline.html"
}

trace { // Turning on trace tracking by default
  enabled = true
  fields = 'process,task_id,hash,name,attempt,status,exit,realtime,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
  file = "${params.outDir}/Reports/Sarek_trace.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

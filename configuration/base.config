/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Basic configuration for some process
 * -------------------------------------------------
 */

includeConfig 'genomes.config'
wf_repository = 'maxulysse'

params {
  // set up default params
  annotateTools = '' // Tools to annotate by annotate.nf
  annotateVCF = '' // Files to annotate by annotate.nf
  containerPath = '.' // Path to containers
  containers = '.' // List of containers to build in buildContainers.nf
  docker = false // Don't use docker to build buildContainers.nf
  download = false // Don't download reference in buildReferences.nf
  explicitBqsrNeeded = true // Enable recalibration in main.nf
  genome = 'GRCh38' // Default reference genome is GRCh38
  genome_base = '' // location of the reference files
  help = false // help flag
  more = false // more flag -> will give version information
  nfRequiredVersion = '0.25.0' // Minimum version of nextflow required
  noBAMQC = false // Use BAMQC
  noGVCF = false // HaplotypeCaller will output gVCF as well
  noReports = false // Reports are made by default
  nucleotidesPerSecond = 1000.0 // To estimate interval size by default
  onlyQC = false // All process will be run and not only the QC tools
  outDir = '.' // Output directory
  project = '' // UPPMAX project number
  push = false // Don't push container to DockerHub
  refDir = '' // Directory where are stored the references to build
  repository = wf_repository // overwritten in singularity-path.config
  sample = '' // sample files in tsv format
  sampleDir = '' // samples directory
  singularity = false // Don't use singularity to build buildContainers.nf
  step = 'mapping' // Default step is mapping
  tag = 'latest' // Default tag is latest, to be overwritten by --tag <version>
  test = false // Not testing by default
  tools = '' // List of tools to use
  verbose = false // Enable for more verbose information
  version = '2.0.0' // Workflow version
}

process {
  $ConcatVCF {
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

report {  // Turning on execution report by default
  enabled = true
  file = "${params.outDir}/Reports/Sarek_report.html"
}

timeline { // Turning on timeline tracking by default
  enabled = true
  file = "${params.outDir}/Reports/Sarek_timeline.html"
}

trace { // Turning on trace tracking by default
  enabled = true
  fields = 'process,task_id,hash,name,attempt,status,exit,realtime,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
  file = "${params.outDir}/Reports/Sarek_trace.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

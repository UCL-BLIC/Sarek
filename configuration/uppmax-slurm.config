/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 * Nextflow config file for CAW
 * -------------------------------------------------
 * Slurm configuration for UPPMAX clusters
 * -------------------------------------------------
 */

params {
  genome_base = params.genome == 'GRCh37' ? '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37' : params.genome == 'GRCh38' ? '/sw/data/uppnex/ToolBox/hg38bundle' : 'References/smallGRCh37'
  runTime       = 48.h
  singleCPUMem  = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
}

process {
  clusterOptions = {"-A $params.project"}
  cpus = 16
  executor = 'slurm'
  memory = 110.GB
  queue = 'node'
  time = 48.h

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  $BuildBWAindexes {
  }
  $BuildPicardIndex {
  }
  $BuildSAMToolsIndex {
  }
  $BuildVCFIndex {
  }
  $ConcatVCF {
    queue = 'core'
  }
  $CreateRecalibrationTable {
    cpus = 10
    memory = {params.singleCPUMem * 8 * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  $IndelRealigner {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  $MapReads {
    time = {params.runTime * task.attempt}
  }
  $MarkDuplicates {
    cpus = 1
    memory = {params.singleCPUMem * 8 * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  $MergeBams {
    memory = {params.singleCPUMem * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  $RealignerTargetCreator {
    time = {params.runTime * task.attempt}
  }
  $RecalibrateBam {
    cpus = 8
    memory = {params.singleCPUMem * 8 * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  $RunAlleleCount {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
    queue = 'core'
  }
  $RunAscat {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
    queue = 'core'
  }
  $RunBamQC {
  }
  $RunBcftoolsStats {
    cpus = 1
  }
  $RunConvertAlleleCounts {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
    queue = 'core'
  }
  $RunFastQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  $RunFreeBayes {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  $RunHaplotypecaller {
    cpus = 1
    // Increase memory quadratically
    memory = {params.singleCPUMem * task.attempt * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  $RunGenotypeGVCFs {
    cpus = 1
    memory = {params.singleCPUMem}
  }
  $RunManta {
  }
  $RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  $RunMutect1 {
    queue = 'core'
    time = {params.runTime * task.attempt}
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunMutect2 {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  $RunSamtoolsStats {
    cpus = 1
    time = {params.runTime * task.attempt}
  }
  $RunSingleManta {
  }
  $RunSingleStrelka {
    time = {params.runTime * task.attempt}
  }
  $RunSnpeff {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  $RunStrelka {
    time = {params.runTime * task.attempt}
  }
  $RunVEP {
    cpus = 1
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
}

/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 * Nextflow config file for CAW
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the configuration folder and imported under a
 * profile name here.
 */

manifest {
  homePage = 'http://opensource.scilifelab.se/projects/caw/'
  description = 'Cancer Analysis Workflow'
}

env {
  NXF_OPTS="-Xms1g -Xmx4g"
}

profiles {
  // Runs the pipeline locally on a single 16-core node
  // Singularity images need to be set up
  standard { // Default profile for UPPMAX secure clusters
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/uppmax-localhost.config'
    includeConfig 'configuration/singularity-path.config'
  }
  // Runs the pipeline using the job scheduler
  // Singularity images need to be set up
  slurm { // slurm profile for UPPMAX secure clusters
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/uppmax-slurm.config'
    includeConfig 'configuration/singularity-path.config'
  }
  // Runs the pipeline locally on a single 16-core node
  // Singularity images will be pulled automatically
  download { // profile for UPPMAX clusters
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/uppmax-localhost.config'
    includeConfig 'configuration/singularity.config'
  }
  // Runs the pipeline using the job scheduler
  // Singularity images will be pulled automatically
  slurmDownload { // slurm profile for UPPMAX clusters
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/uppmax-slurm.config'
    includeConfig 'configuration/singularity.config'
  }
  // Docker images will be pulled automatically
  docker { // For small testing testing with Docker
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/travis.config'
    includeConfig 'configuration/docker.config'
    includeConfig 'configuration/containers.config'
  }
  // Docker images will be pulled automatically
  awsbatch { // For running on AWS Batch with Docker
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/aws-batch.config'
    includeConfig 'configuration/docker.config'
    includeConfig 'configuration/containers.config'
   }
  // Singularity images will be pulled automatically
  singularity { // For small testing
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/travis.config'
    includeConfig 'configuration/singularity.config'
    includeConfig 'configuration/containers.config'
  }
  // Singularity images need to be set up
  singularityPath { // For small testing
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/travis.config'
    includeConfig 'configuration/singularity-path.config'
  }
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline { // Turning on timeline tracking by default
  enabled = true
}

report {  // Turning on execution report by default
  enabled = true
}

trace { // Turning on trace tracking by default
  enabled = true
  fields = 'process,task_id,hash,name,attempt,status,exit,realtime,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
